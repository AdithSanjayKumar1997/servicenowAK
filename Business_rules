=> Business Rules

Server Side scripting and runs when record is displayed, inserted or updated or deleted or table is queried

=> Types of Business Rules
i) Before
ii) After
iii) Async
iv) Display



Actions performed by businesss rules

i) Update the field value after creating the record as per the values of other fields
ii) Stop user to update or insert record if invalid data is used
iii) Display Information message when record is inserted
iv) Created child tasks when parent is created

Global Variables in Business Rules

i) Current
ii) Previous
iii) g_scratchpad => Display
iv) gs

=> Before Business rule

Before business rule is triggered when user submits the form however before any action is taken on the record in the database.

Major Use Cases of Before BR

i) Abort update of record if form does not have expected value
ii) Populate Assignment group before creation of incident record
iii) User should not delete a record if condition does not match
iv) Date should be updated before insert of a record

Scenario
If state is new then user should not be able to delete the incident
You cannot create a new record as you already have existing one.
User should not be able to change the state of story to work in progress if there is no scrum task created in the story.

Var gr = new GlideRecord(‘rm_scrum_task’);
gr.addQuery(‘story’, current.sys_id);
gr.query();
If(!gr.next())
{
	current .setAbortAction(true);
}

Configuration item cannot be deleted if there are tasks or incidents associated with same CI

var gr = new GlideRecord(‘task’);
gr.addQuery(‘cmdb_ci’,current.sys_id);
Gr.query();
If(gr.next())
{
	current.setAbortAction(true);
}

Before Query ﻿ ﻿ ﻿

 ﻿Only Operational CI should be queried if user is not admin

condition
!(gs.getUser().hasRole(‘admin’))

Script: current.addQuery(‘Operational_status’, “1”)



=> After Business rule

After Business Rule is triggered when user submits the form and any action is taken on the record in the database.

Major use cases of After BR
i) Showing message after creation of record
ii) Create problem task after creation of problem record
iii) Delete associated records after deletion of parent records
iv) Update the worknotes of child incident when parent worknotes are updated

insert scenario

i) user should see message at the top when story is created

update scenario

i) When the priority of incident is chaned to p1 then it should be updated in description

ii) When state changes to work in progress then scrum tasks should be created


=> Async Business rule

Async business rule is triggered when user submits the form and any action is taken on the record in the database however it creates a schedule and run the job


Major Use Cases of Async BR

i) Create Event
ii) Send REST API Call to another application on update of incident
iii) Calculating SLA


insert scenario
i) When incident is inserted with priority1 then create an event to send notification

ii) When Assignment group changes then update the Task SLA Group to current Assignment Group



=> Display Business rule

Display business rule is triggered when user opens a form.

Major use cases

i) Storing field value for client
ii) Displaying Message on the form


g_scratchpad.sd = current.short_description


5 Use cases of Business Rules

1. When story record is created then it should automatically create 4 different scrum tasks records of development, testing, analysis, documentation ﻿

var type = [“Analysis”,”Coding”,”Documentation”,”Testing”];
for(i=0;i<type.length;i++)
{
var gr = new GlideRecord(‘rm_scrum_task’);
Gr.initialize();
Gr.story = current.sys_id;
Gr.short_description = type[i];
Var j= i+1;
Gr.type = j + ‘’;
Gr.insert();
}

2. There should be a field on problem form which should show the number of incident records associated with same form

var gr = new GlideRecord(‘problem’);
Gr.addQuery(’sys_id’,current.problem_id);
Gr.query();
If(gr.next())
{
Gr.u_associated_incidents = gr.u_associated_incidents + 1;
}
gr.update();


3. If all the Catalog Tasks request are closed completed then request item should automatically closed

Var gr = new GlideRecord(’sc_task’);
Gr.addQuery(‘request_item’,current.request_item);
Gr.addQuery(’state’,’!=‘,’3’);
Gr.query();
If(!gr.next()){
Var grItem = new GlideRecord(’sc_req_item’);
grItem.addQuery('sys_id', current.request_item);
grItem.query();
if(grItem.next()) 
{
grItem.state = '3';
}
grItem.update();
}

4. User should not be able to resolve the incident if change record mentioned in change request field is not closed.

5. If users updates work notes of problem task then it should update same work notes in parent problem record as well with highlighting problem task number.

var workNotes = current.work_notes.getJournalEntry(1);
var gr = new GlideRecord('problem');
gr.addQuery('sys_id', current.problem);
gr.query();
if(gr.next()){
gr.work_notes = "This worknote if updated in "+current.number + "\n" + workNotes;
}
gr.update();



Calculate leaves

var gr = new GlideRecord('x_26328_lms_leave_bucket');
gr.addQuery('employee', current.requested_by);
gr.addQuery('leave_type',current.leave_type);
gr.query();
if(!gr.next()){
gr.balance = gr.balance - current.duration;
gr.taken = gr.taken+current.duration;
gr.update();
}
